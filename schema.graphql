type Block_entry @entity {
  id: String! # Globally unique identifier
  baseFeePerGas: BigInt
  extraData: Bytes!
  gasLimit: BigInt!
  gasUsed: BigInt!
  hash: String!
  logsBloom: Bytes!
  miner: String!
  number: BigInt!
  parentHash: String!
  receiptsRoot: Bytes!
  size: BigInt!
  stateRoot: String!
  timestamp: BigInt!
  totalDifficulty: BigInt!
  transactionsRoot: String!
  transactions: [Transaction_entry!]! @derivedFrom(field: "block")
  # events: [Event_entry!]! @derivedFrom(field: "block")
}

type Transaction_entry @entity {
  id: String! # Globally unique identifier (hash + chainId)
  block: Block_entry! # Block this transaction is part of
  blockHash: String!
  blockNumber: BigInt!
  chainId: Int
  from: Address!
  gas: BigInt!
  gasPrice: BigInt
  hash: String!
  input: String!
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  nonce: Int!
  to: Address!
  transactionIndex: Int!
  value: BigInt!
  logs: [Log_entry!]! @derivedFrom(field: "transaction")
  # events: [Event_entry!]! @derivedFrom(field: "transaction")
}

type Address @entity {
  id: String!
  transactions: [Transaction_entry!]! @derivedFrom(field: "from")
}

type Log_entry @entity {
  id: String! # Globally unique identifier (`${blockHash}-${logIndex}`)
  transaction: Transaction_entry! # Transaction this log is part of
  address: Address!
  blockHash: String!
  blockNumber: BigInt!
  data: String!
  logIndex: Int!
  removed: Boolean!
  topics: [String!]!
  transactionHash: String!
  transactionIndex: Int!
  # events: [Event_entry!]! @derivedFrom(field: "log")
}

# interface Event_entry {
#   id: String!
#   # block: Block_entry!
#   # transaction: Transaction_entry!
#   # log: Log_entry!
# }

type EIP712DomainChanged_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
}

type ProposalCanceled_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  proposalId: BigInt!
}

type ProposalCreated_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  proposalId: BigInt!
  proposer: Address!
  actions: [Action!]! @derivedFrom(field: "proposalId")
  voteStart: BigInt!
  voteEnd: BigInt!
  description: String!
}

type Action @entity {
  id: String!
  proposalId: String!
  index: Int!
  target: Address!
  value: BigInt!
  signature: String!
  calldata: Bytes!
}

type ProposalExecuted_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  proposalId: BigInt!
}

type ProposalQueued_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  proposalId: BigInt!
  etaSeconds: BigInt!
}

type ProposalThresholdSet_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  oldProposalThreshold: BigInt!
  newProposalThreshold: BigInt!
}

type QuorumNumeratorUpdated_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  oldQuorumNumerator: BigInt!
  newQuorumNumerator: BigInt!
}

type TimelockChange_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  oldTimelock: Address!
  newTimelock: Address!
}

type VoteCast_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  voter: Address!
  proposalId: BigInt!
  support: Int!
  weight: BigInt!
  reason: String!
}

type VoteCastWithParams_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  voter: Address!
  proposalId: BigInt!
  support: Int!
  weight: BigInt!
  reason: String!
  params: Bytes!
}

type VotingDelaySet_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  oldVotingDelay: BigInt!
  newVotingDelay: BigInt!
}

type VotingPeriodSet_EVENT @entity {
  id: String!
  block: Block_entry!
  transaction: Transaction_entry!
  log: Log_entry!
  oldVotingPeriod: BigInt!
  newVotingPeriod: BigInt!
}
